// <auto-generated />
using System;
using DrDocx.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DrDocx_Core.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200111213604_ConsolidatePatientInfo")]
    partial class ConsolidatePatientInfo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("DrDocx_Core.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("AgeAtTesting")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfTesting")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT");

                    b.Property<int>("MedicalRecordNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Medications")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DrDocx_Core.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("DrDocx_Core.Models.TestGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestGroups");
                });

            modelBuilder.Entity("DrDocx_Core.Models.TestGroupTest", b =>
                {
                    b.Property<int>("TestGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("TestGroupId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("TestGroupTests");
                });

            modelBuilder.Entity("DrDocx_Core.Models.TestResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Percentile")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RawScore")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RelatedTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScaledScore")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestResultGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RelatedTestId");

                    b.HasIndex("TestResultGroupId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("DrDocx_Core.Models.TestResultGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestGroupInfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestGroupInfoId");

                    b.ToTable("TestResultGroups");
                });

            modelBuilder.Entity("DrDocx_Core.Models.TestGroupTest", b =>
                {
                    b.HasOne("DrDocx_Core.Models.TestGroup", "TestGroup")
                        .WithMany("TestGroupTests")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrDocx_Core.Models.Test", "Test")
                        .WithMany("TestGroupTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrDocx_Core.Models.TestResult", b =>
                {
                    b.HasOne("DrDocx_Core.Models.Test", "RelatedTest")
                        .WithMany()
                        .HasForeignKey("RelatedTestId");

                    b.HasOne("DrDocx_Core.Models.TestResultGroup", null)
                        .WithMany("Tests")
                        .HasForeignKey("TestResultGroupId");
                });

            modelBuilder.Entity("DrDocx_Core.Models.TestResultGroup", b =>
                {
                    b.HasOne("DrDocx_Core.Models.Patient", null)
                        .WithMany("ResultGroups")
                        .HasForeignKey("PatientId");

                    b.HasOne("DrDocx_Core.Models.TestGroup", "TestGroupInfo")
                        .WithMany()
                        .HasForeignKey("TestGroupInfoId");
                });
#pragma warning restore 612, 618
        }
    }
}
